name: CI
on: [pull_request]

jobs:
  schema-check:
    name: Schema Check
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.head.repo.fork }}
    timeout-minutes: 5

    env:
      HIVE_TOKEN: ${{ secrets.HIVE_TOKEN }}

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup
        uses: ./.github/workflows/setup.yml

      - name: Build CLI
        run: pnpm turbo build --filter=./packages/libraries/cli --color

      - name: Check PR label
        if: contains(github.event.pull_request.labels.*.name, 'non-breaking')
        run: echo "SAFE_FLAG=--forceSafe" >> $GITHUB_OUTPUT
        id: pr-label-check

      - name: Schema Check
        run:
          ./packages/libraries/cli/bin/dev schema:check
          "packages/services/api/src/modules/*/module.graphql.ts" ${{
          steps.pr-label-check.outputs.SAFE_FLAG }} --github

  test:
    name: Tests
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup
        uses: ./.github/workflows/setup.

      - name: Test
        run: pnpm test

  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup
        uses: ./.github/workflows/setup.

      - name: Build
        run: pnpm build

      - name: Test ESM & CJS exports integrity
        run: pnpm turbo check:build

  rust:
    name: Build Rust
    runs-on: ubuntu-latest
    timeout-minutes: 40

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup
        uses: ./.github/workflows/setup.

      - name: Install Rust
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          rustup target add x86_64-unknown-linux-gnu

      - name: Cache Rust
        uses: Swatinem/rust-cache@v1
        with:
          key: rust_linux_cross

      - name: Build
        run: cargo build --target x86_64-unknown-linux-gnu --release

      - name: Strip binary from debug symbols
        run: strip target/x86_64-unknown-linux-gnu/release/router

      - name: Compress
        run:
          ./target/x86_64-unknown-linux-gnu/release/compress
          ./target/x86_64-unknown-linux-gnu/release/router ./router.tar.gz

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: router-linux
          path: target/x86_64-unknown-linux-gnu/release/router

  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 5

      - name: Setup
        uses: ./.github/workflows/setup.

      - name: ESLint cache
        uses: actions/cache@v3
        with:
          path: '.eslintcache'
          key: ${{ runner.os }}-eslint-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-eslint

      - name: Type Check
        run: pnpm typecheck

      - name: Lint ESLint
        run: pnpm lint
        env:
          TIMING: 'true'
          DEBUG: 'eslint:cli-engine'

      - name: Lint Prettier
        run: pnpm lint:prettier

  docker-build-push:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    if: ${{ !github.event.pull_request.head.repo.fork }}

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: docker-build-sources
          path: ./

      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 5

      - name: Setup
        uses: ./.github/workflows/setup.

      - name: Build
        run: pnpm build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: 'linux/arm64,linux/amd64'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v6

      - uses: frabert/replace-string-action@v2.0
        id: branch_name_fix
        with:
          pattern: '(\/|-)'
          string: ${{ steps.branch-name.outputs.current_branch }}
          replace-with: '_'

      - name: Build Docker Images
        env:
          DOCKER_REGISTRY: ${{ env.REGISTRY }}/${{ github.repository }}/
          COMMIT_SHA: ${{ github.sha }}
          RELEASE: ${{ github.sha }}
          BRANCH_NAME: ${{ steps.branch_name_fix.outputs.replaced }}
          BUILD_TYPE: 'publish'
        run: |
          docker buildx bake \
            -f docker.hcl \
            build --push

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25

    env:
      DOCKER_REGISTRY: ghcr.io/${{ github.repository }}/
      DOCKER_TAG: :${{ github.sha }}

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup
        uses: ./.github/workflows/setup.

      - name: Build
        run: pnpm run --filter integration-tests build-and-pack

      - name: Build App
        run: pnpm turbo build --filter=./packages/web/app --color

      - name: Pull images
        run: |
          docker-compose -f integration-tests/docker-compose.yml pull \
            db \
            clickhouse \
            zookeeper \
            broker \
            redis \
            supertokens \
            s3 \
            s3_provision_buckets \
            local_cdn \
            local_broker \
            external_composition

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Images
        env:
          COMMIT_SHA: ${{ github.sha }}
          RELEASE: ${{ github.sha }}
          BUILD_TYPE: 'ci'
        run: |
          docker buildx bake \
            -f docker.hcl \
            build \
            --load

      - name: Integration Tests
        run: pnpm --filter integration-tests dockest
        timeout-minutes: 15
        env:
          STRIPE_PUBLIC_KEY: ${{ secrets.TEST_STRIPE_PUBLIC_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.TEST_STRIPE_SECRET_KEY }}
          SUPERTOKENS_CONNECTION_URI: http://127.0.0.1:3567
          SUPERTOKENS_API_KEY: bubatzbieber6942096420
          EXTERNAL_COMPOSITION_SECRET: secretsecret

      - name: Dockest logs
        if: always()
        run: cat integration-tests/*.log

  integration-tests-ff:
    name: Integration Tests (with Feature Flags enabled)
    runs-on: ubuntu-latest
    timeout-minutes: 25

    env:
      DOCKER_REGISTRY: ghcr.io/${{ github.repository }}/
      DOCKER_TAG: :${{ github.sha }}
      # Feature Flags
      FF_CLICKHOUSE_V2_TABLES: '1'

    steps:
      - name: Detect feature flags
        id: feature_flags
        run: |
          total=$(env | grep "FF_.*" -c)
          if [ $total -gt 0 ]; then
              echo 'detected=true' >> $GITHUB_OUTPUT
          fi

      - name: Check out repository code
        uses: actions/checkout@v3
        if: steps.feature_flags.outputs.detected == 'true'
        with:
          fetch-depth: 5

      - name: Setup
        if: steps.feature_flags.outputs.detected == 'true'
        uses: ./.github/workflows/setup.

      - name: Build
        if: steps.feature_flags.outputs.detected == 'true'
        run: pnpm --filter integration-tests build-and-pack

      - name: Build App
        if: steps.feature_flags.outputs.detected == 'true'
        run: pnpm turbo build --filter=./packages/web/app --color

      - name: Pull images
        if: steps.feature_flags.outputs.detected == 'true'
        run: |
          docker-compose -f integration-tests/docker-compose.yml pull \
            db \
            clickhouse \
            zookeeper \
            broker \
            redis \
            supertokens \
            local_cdn \
            external_composition

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Images
        env:
          COMMIT_SHA: ${{ github.sha }}
          RELEASE: ${{ github.sha }}
          BUILD_TYPE: 'ci'
        run: |
          docker buildx bake \
            -f docker.hcl \
            build \
            --load

      - name: Integration Tests
        if: steps.feature_flags.outputs.detected == 'true'
        run: pnpm --filter integration-tests dockest
        timeout-minutes: 15
        env:
          STRIPE_PUBLIC_KEY: ${{ secrets.TEST_STRIPE_PUBLIC_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.TEST_STRIPE_SECRET_KEY }}
          SUPERTOKENS_CONNECTION_URI: http://127.0.0.1:3567
          SUPERTOKENS_API_KEY: bubatzbieber6942096420
          EXTERNAL_COMPOSITION_SECRET: secretsecret

      - name: Dockest logs
        if: steps.feature_flags.outputs.detected == 'true' && always()
        run: cat integration-tests/*.log

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      HIVE_ENCRYPTION_SECRET: wowverysecuremuchsecret
      HIVE_EMAIL_FROM: no-reply@graphql-hive.com
      HIVE_APP_BASE_URL: http://localhost:8080
      SUPERTOKENS_API_KEY: wowverysecuremuchsecret
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: wowverysecuremuchsecret
      REDIS_PASSWORD: wowverysecuremuchsecret
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: registry
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      CDN_AUTH_PRIVATE_KEY: 6b4721a99bd2ef6c00ce4328f34d95d7

    steps:
      - name: Set Cypress cache folder
        run: echo "CYPRESS_CACHE_FOLDER=$(pnpm store path)/Cypress" >> $GITHUB_ENV

      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 5

      - name: Setup
        uses: ./.github/workflows/setup.
        with:
          cache: ''

      - name: Build
        run: pnpm build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Bake
        uses: docker/bake-action@v2
        env:
          PWD: ${{ github.workspace }}
        with:
          files: docker.hcl
          load: true
          targets: build
          set: |
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max

      # TODO: mounting volumes in the CI causes permission problems for services
      - name: Remove volume mounts from compose file
        uses: mikefarah/yq@v4.30.5
        with:
          cmd: yq -i 'del(.services.*.volumes)' docker-compose.community.yml

      - name: Up
        timeout-minutes: 5
        run: docker compose -f docker-compose.community.yml up -d --wait

      - name: Cypress run
        uses: cypress-io/github-action@v4
        with:
          install: false
          command: pnpm test:e2e
